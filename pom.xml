<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>docker-demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>docker-demo</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>

		<!-- docker hub镜像仓库地址 -->
		<docker.repostory>huangran/hr</docker.repostory>
		<!-- 阿里云 docker镜像仓库地址 -->
		<!--<docker.repostory>registry.cn-beijing.aliyuncs.com/pers/hr</docker.repostory>-->

		<docker.image.tag>0.0.1</docker.image.tag>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>-->

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-test</artifactId>
			<scope>test</scope>
		</dependency>-->
	</dependencies>

	<build>
		<!--项目打包的名称-->
		<finalName>docker-demo</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<!-- 这里使用新版dockerfile-maven-plugin插件 -->
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.4.13</version>
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<!--如果package时不想用docker打包,就注释掉这个goal-->
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!--Dockerfile目录指定 -->
					<dockerfile>${project.basedir}/Dockerfile</dockerfile>
					<repository>${docker.repostory}</repository>
					<!-- 可以指定tag，如果使用maven 命令指定tag就注释掉这个 -->
					<tag>${docker.image.tag}</tag>
					<buildArgs>
						<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
				</configuration>

			</plugin>

			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>2.4.0</version>
				<configuration>
					<container>
						<creationTime>USE_CURRENT_TIMESTAMP</creationTime>
						<jvmFlags>
							<jvmFlag>-Duser.timezone=Asia/Shanghai</jvmFlag>
							<jvmFlag>-Djava.security.egd=file:/dev/./urandom</jvmFlag>
							<!-- 使用apollo配置中心pro环境 这块在docker run 时指定，如果在这块指定，就写死了，故去掉
							<jvmFlag>-Dapollo.configService=http://apollo-pro.mvmyun.com</jvmFlag>
							-->
						</jvmFlags>
					</container>
					<from>
						<!--<image>harbor.mvmyun.com/library/openjdk:11.0.7-jre-slim</image>-->
						<!--<image>harbor.mvmyun.com/library/openjdk:8-jdk</image>-->
						<image>openjdk:8-jdk</image>
						<!--<auth>
							<username>admin</username>
							<password>harbor123456</password>
						</auth>-->
					</from>
					<to>
						<!-- 使用 harbor 镜像仓库
						<image>harbor.mvmyun.com/connectivity/${artifactId}</image>-->
						<!-- 使用 dockerhub 镜像仓库-->
						<image>${docker.repostory}</image>
						<!--<auth>
							<username>huangran</username>
							<password>huangran92.2.7</password>
						</auth>-->
						<auth>
							<username>${env.REGISTRY_USERNAME}</username>
							<password>${env.REGISTRY_PASSWORD}</password>
						</auth>
						<tags>
							<tag>latest</tag>
							<tag>${project.version}</tag>
						</tags>
					</to>
					<allowInsecureRegistries>true</allowInsecureRegistries>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>



</project>
